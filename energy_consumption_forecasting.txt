#  Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load and preprocess the dataset
df = pd.read_csv('/kaggle/input/household-power-consumption/household_power_consumption.txt',
                 sep=';',
                 na_values='?',
                 low_memory=False)

# Combine date and time into a timestamp
df['timestamp'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], dayfirst=True)

# Keep only timestamp and Global_active_power
df = df[['timestamp', 'Global_active_power']]
df = df.rename(columns={'Global_active_power': 'consumption'})
df = df.dropna()

# Set timestamp as index and convert to float
df = df.set_index('timestamp')
df['consumption'] = df['consumption'].astype(float)

# Normalize the data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['consumption']])

# Create sequences for LSTM
def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(seq_length, len(data)):
        X.append(data[i-seq_length:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

sequence_length = 24  # past 24 hours
X, y = create_sequences(scaled_data, sequence_length)

# Reshape for LSTM input
X = X.reshape((X.shape[0], X.shape[1], 1))

# Build and train the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=10, batch_size=32)

# Make predictions
predictions = model.predict(X)
predictions = scaler.inverse_transform(predictions)
real = scaler.inverse_transform(y.reshape(-1, 1))

# Plot the results
plt.figure(figsize=(12, 6))
plt.plot(real, label='Actual Consumption')
plt.plot(predictions, label='Predicted Consumption')
plt.title('Energy Consumption Forecasting with LSTM')
plt.xlabel('Time')
plt.ylabel('Global Active Power (kilowatts)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
